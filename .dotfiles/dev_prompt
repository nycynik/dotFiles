#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# And this is mostly @nicksp's file'
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

function prompt_node {
  if hash node 2>/dev/null; then
    local v=$(node -v)
  fi
  [ "$v" != "" ] && echo "${violet}[${yellow}node${gray}:${yellow}${v:1}${violet}]"
}

function prompt_virtualenv {
  local env=$(basename "$VIRTUAL_ENV")
  [ "$env" != "" ] && echo "${violet}[${green}py${gray}:${green}$env${violet}]"
}

function prompt_ruby {
    local ruby_version=$(rvm-prompt)
    ruby_version=${ruby_version#ruby-}
    [[ $ruby_version == *"@"* ]] || ruby_version="${ruby_version}"
    echo "${violet}[${blue}ruby${gray}:${blue}$ruby_version${violet}]"
}

function prompt_rvm {
    rbv=`rvm-prompt`
    rbv=${rbv#ruby-}
    [[ $rbv == *"@"* ]] || rbv="${rbv}@default"
    echo $rbv
}

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for un-staged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for un-tracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" (${s})";

		printf "${violet}[${1}git${gray}:${1}${branchName}${blue}${s}${violet}]${reset}";
	else
		return;
	fi;
}

if tput setaf 1 &> /dev/null; then
	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	# Solarized colors, taken from http://git.io/solarized-colors.
	black=$(tput setaf 0);
	gray=$(tput setaf 7);
	blue=$(tput setaf 33);
	cyan=$(tput setaf 37);
	green=$(tput setaf 64);
	orange=$(tput setaf 166);
	purple=$(tput setaf 125);
	red=$(tput setaf 124);
	violet=$(tput setaf 61);
	white=$(tput setaf 15);
	yellow=$(tput setaf 136);
else
	bold='';
	reset="\e[0m";
	black="\e[1;30m";
	gray="\e[1;37m";
	blue="\e[1;34m";
	cyan="\e[1;36m";
	green="\e[1;32m";
	orange="\e[1;33m";
	purple="\e[1;35m";
	red="\e[1;31m";
	violet="\e[1;35m";
	white="\e[1;37m";
	yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${orange}";
else
	userStyle="${green}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${orange}";
else
	hostStyle="${green}";
fi;

# Set the terminal title to the current working directory.
PS1="\[\033]0;\w\007\]\[${bold}\]";

PS1DEV=""
PS1DEV+="\$(prompt_node)"; # Node details
PS1DEV+="\$(prompt_virtualenv)"; # Python details
PS1DEV+="\$(prompt_ruby)"; # Ruby details
PS1DEV+="\$(prompt_git \"\[${reset}\]\")"; # Git repository details

[[ !  -z  $PS1DEV  ]] && PS1+="\n$PS1DEV"

PS1+="\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
PS1+="@";
PS1+="\[${hostStyle}\]\h"; # host
PS1+=": ";
PS1+="\[${yellow}\]\w"; # working directory

PS1+="\n\[${reset}\]\$ "; # `$` (and reset color)
export PS1;

PS2="${yellow}→ ${reset}";
export PS2;
